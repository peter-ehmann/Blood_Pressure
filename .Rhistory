colnames(risk) <- lambdas
View(test_mse)
source('~/Documents/Grad_Classes/2_DataScience/4_Spring2019/2_588_DataMining/0_HW/HW1_020620/4/4b_script.R', echo=TRUE)
View(risk_df)
View(test_df)
View(train_df)
source('~/Documents/Grad_Classes/2_DataScience/4_Spring2019/2_588_DataMining/0_HW/HW1_020620/4/4b_script.R', echo=TRUE)
View(train_df)
View(test_df)
View(risk_df)
?rnorm
??leeps
?leaps
??leaps
install.packages("leaps")
set.seed(12345)
x <- rnorm(100)
e <- rnorm(100)
beta0 <- 2
beta1 <- 3
beta2 <- -1
beta3 <- 5
y <- beta0 + beta1*(x) + beta2*(x^2) + beta3*(x^3) + e
data <- data.frame(y = y, x = x)
View(data)
x_lasso <- model.matrix(y ~ poly(x, 10, raw = T), data = data)[,-1]
View(x_lasso)
x_lasso <- model.matrix(y ~ poly(x, 10, raw = T), data = data)[,-1]
model_lasso <- glmnet::cv.glmnet(x_lasso, y, alpha = 1)
lambda <- model_lasso$lambda.min
plot(model_lasso)
best_lasso_model <- glmnet::glmnet(x_lasso, y, alpha = 1)
predict(best_lasso_model, s = lambda, type = "coefficients")
install.packages("leaps")
library(leaps)
library(glmnet)
set.seed(12345)
x <- rnorm(100)
e <- rnorm(100)
beta0 <- 2
beta1 <- 3
beta2 <- -1
beta3 <- 5
y <- beta0 + beta1*(x) + beta2*(x^2) + beta3*(x^3) + e
data <- data.frame(y = y, x = x)
model_full <- leaps::regsubsets(y ~ poly(x, 10, raw = TRUE), data = data, nvmax = 10)
model_full_summary <- summary(model_full)
which.min(model_full_summary$cp)
plot(model_full_summary$cp, xlab = "Model Polynomial Order", ylab = "Cp", pch = 15, type = "l")
points(4, model_full_summary$cp[4], pch = 5, col = "blue", lwd = 7)
which.min(model_full_summary$bic)
model_full_summary$cp
plot(model_full_summary$bic, xlab = "Model Polynomial Order", ylab = "BIC", pch = 15, type = "l")
points(4, model_full_summary$bic[4], pch = 5, col = "blue", lwd = 7)
which.min(model_full_summary$adjr2)
plot(model_full_summary$adjr2, xlab = "Model Polynomial Order", ylab = "Adjusted R^2", pch = 15, type = "l")
which.max(model_full_summary$adjr2)
plot(model_full_summary$adjr2, xlab = "Model Polynomial Order", ylab = "Adjusted R^2", pch = 15, type = "l")
points(5, model_full_summary$adjr2[5], pch = 5, col = "blue", lwd = 7)
coefficients(model_full_summary, id = 3)
coefficients(model_full_summary, id = 4)
coefficients(model_full_summary, id = 5)
coefficients(model_full, id = 4)
model_forward <- leaps::regsubsets(y ~ poly(x, 10, raw = TRUE), data = data, nvmax = 10, method = "forward")
summary_fwd <- summary(model_forward)
model_backward <- leaps::regsubsets(y ~ poly(x, 10, raw = TRUE), data = data, nvmax = 10, method = "backward")
summary_bwd <- summary(model_backward)
which.min(summary_fwd$cp)
which.min(summary_fwd$bic)
which.min(summary_fwd$adjr2)
which.max(summary_fwd$adjr2)
which.min(summary_bwd$cp)
which.min(summary_bwd$bic)
which.max(summary_bwd$adjr2)
coefficients(model_backward, id = 6)
which.min(summary_fwd$cp)
which.min(summary_fwd$bic)
which.max(summary_fwd$adjr2)
which.min(summary_bwd$cp)
which.min(summary_bwd$bic)
which.max(summary_bwd$adjr2)
which.min(summary_fwd$cp)       # p=4
which.min(summary_fwd$bic)      # p=4
which.max(summary_fwd$adjr2)
which.min(summary_bwd$cp)
which.min(summary_bwd$bic)
which.max(summary_bwd$adjr2)
x_lasso <- model.matrix(y ~ poly(x, 10, raw = TRUE), data = data)[,-1]
model_lasso <- glmnet::cv.glmnet(x_lasso, y, alpha = 1)
lambda <- model_lasso$lambda.min
best_lasso_model <- glmnet::glmnet(x_lasso, y, alpha = 1)
predict(best_lasso_model, s = lambda, type = "coefficients")
beta7 <- 8.5
y <- beta0 + beta7*(x^7) + e
data <- data.frame(y = y, x = x)
model_full <- leaps::regsubsets(y ~ poly(x, 10, raw = TRUE), data = data, nvmax = 10)
model_summary <- summary(model_full)
which.min(model_summary$cp)
coefficients(model_full, id = 1)
beta7 <- 8.5
y <- beta0 + beta7*(x^7) + e
data <- data.frame(y = y, x = x)
model_full <- leaps::regsubsets(y ~ poly(x, 10, raw = TRUE), data = data, nvmax = 10)
model_summary <- summary(model_full)
which.min(model_summary$cp)
which.min(model_summary$bic)
which.max(model_summary$adjr2)
which.min(model_summary$bic)
coefficients(model_full, id = 1)
which.max(model_summary$adjr2)
coefficients(model_full, id = 4)
model_lasso <- glmnet::cv.glmnet(x_lasso, y, alpha = 1)
lambda <- model_lasso$lambda.min
plot(model_lasso)
set.seed(12345)
x <- rnorm(100)
e <- rnorm(100)
beta0 <- 2
beta1 <- 3
beta2 <- -1
beta3 <- 5
y <- beta0 + beta1*(x) + beta2*(x^2) + beta3*(x^3) + e
data <- data.frame(y = y, x = x)
model_full <- leaps::regsubsets(y ~ poly(x, 10, raw = TRUE), data = data, nvmax = 10)
model_full_summary <- summary(model_full)
which.min(model_full_summary$cp)
plot(model_full_summary$cp, xlab = "Model Polynomial Order", ylab = "Cp", pch = 15, type = "l")
points(4, model_full_summary$cp[4], pch = 5, col = "blue", lwd = 7)
which.min(model_full_summary$bic)
plot(model_full_summary$bic, xlab = "Model Polynomial Order", ylab = "BIC", pch = 15, type = "l")
points(4, model_full_summary$bic[4], pch = 5, col = "blue", lwd = 7)
which.max(model_full_summary$adjr2)
plot(model_full_summary$adjr2, xlab = "Model Polynomial Order", ylab = "Adjusted R^2", pch = 15, type = "l")
points(5, model_full_summary$adjr2[5], pch = 5, col = "blue", lwd = 7)
set.seed(12345)
x <- rnorm(100)
e <- rnorm(100)
beta0 <- 2
beta1 <- 3
beta2 <- -1
beta3 <- 5
y <- beta0 + beta1*(x) + beta2*(x^2) + beta3*(x^3) + e
data <- data.frame(y = y, x = x)
model_full <- leaps::regsubsets(y ~ poly(x, 10, raw = TRUE), data = data, nvmax = 10)
model_full_summary <- summary(model_full)
which.min(model_full_summary$cp)
plot(model_full_summary$cp, xlab = "Model Polynomial Order", ylab = "Cp", pch = 15, type = "l")
points(4, model_full_summary$cp[4], pch = 5, col = "blue", lwd = 7)
which.min(model_full_summary$bic)
plot(model_full_summary$bic, xlab = "Model Polynomial Order", ylab = "BIC", pch = 15, type = "l")
points(4, model_full_summary$bic[4], pch = 5, col = "blue", lwd = 7)
which.max(model_full_summary$adjr2)
plot(model_full_summary$adjr2, xlab = "Model Polynomial Order", ylab = "Adjusted R^2", pch = 15, type = "l")
points(5, model_full_summary$adjr2[5], pch = 5, col = "blue", lwd = 7)
coefficients(model_full, id = 4)
coefficients(model_full, id = 5)
model_forward <- leaps::regsubsets(y ~ poly(x, 10, raw = TRUE), data = data, nvmax = 10, method = "forward")
summary_fwd <- summary(model_forward)
model_backward <- leaps::regsubsets(y ~ poly(x, 10, raw = TRUE), data = data, nvmax = 10, method = "backward")
summary_bwd <- summary(model_backward)
which.min(summary_fwd$cp)       # p=4
which.min(summary_fwd$bic)      # p=4
which.max(summary_fwd$adjr2)    # p=5
which.min(summary_bwd$cp)       # p=6
which.min(summary_bwd$bic)      # p=4
which.max(summary_bwd$adjr2)    # p=6
coefficients(model_forward, id = 4)
coefficients(model_forward, id = 5)
coefficients(model_backward, id = 4)
coefficients(model_backward, id = 5)
coefficients(model_backward, id = 6)
x_lasso <- model.matrix(y ~ poly(x, 10, raw = TRUE), data = data)[,-1]
model_lasso <- glmnet::cv.glmnet(x_lasso, y, alpha = 1)
lambda <- model_lasso$lambda.min
plot(model_lasso)
set.seed(12345)
x <- rnorm(100)
e <- rnorm(100)
beta0 <- 2
beta1 <- 3
beta2 <- -1
beta3 <- 5
y <- beta0 + beta1*(x) + beta2*(x^2) + beta3*(x^3) + e
data <- data.frame(y = y, x = x)
model_full <- leaps::regsubsets(y ~ poly(x, 10, raw = TRUE), data = data, nvmax = 10)
model_full_summary <- summary(model_full)
which.min(model_full_summary$cp)
plot(model_full_summary$cp, xlab = "Model Polynomial Order", ylab = "Cp", pch = 15, type = "l")
points(4, model_full_summary$cp[4], pch = 5, col = "blue", lwd = 7)
which.min(model_full_summary$bic)
plot(model_full_summary$bic, xlab = "Model Polynomial Order", ylab = "BIC", pch = 15, type = "l")
points(4, model_full_summary$bic[4], pch = 5, col = "blue", lwd = 7)
which.max(model_full_summary$adjr2)
plot(model_full_summary$adjr2, xlab = "Model Polynomial Order", ylab = "Adjusted R^2", pch = 15, type = "l")
points(5, model_full_summary$adjr2[5], pch = 5, col = "blue", lwd = 7)
coefficients(model_full, id = 4)
coefficients(model_full, id = 5)
model_forward <- leaps::regsubsets(y ~ poly(x, 10, raw = TRUE), data = data, nvmax = 10, method = "forward")
summary_fwd <- summary(model_forward)
model_backward <- leaps::regsubsets(y ~ poly(x, 10, raw = TRUE), data = data, nvmax = 10, method = "backward")
summary_bwd <- summary(model_backward)
which.min(summary_fwd$cp)       # p=4
which.min(summary_fwd$bic)      # p=4
which.max(summary_fwd$adjr2)    # p=5
which.min(summary_bwd$cp)       # p=6
which.min(summary_bwd$bic)      # p=4
which.max(summary_bwd$adjr2)    # p=6
# HW1 - Problem 5
set.seed(12345)
# (a) Use the rnorm() function to generate a predictor X of length n=100, as well as a noise vector e of length n=100.
x <- rnorm(100)
e <- rnorm(100)
# (b) Generate a response vector Y of length n=100 according to the model ... where b0, b1, b2, b3 are constants.
beta0 <- 2
beta1 <- 3
beta2 <- -1
beta3 <- 5
y <- beta0 + beta1*(x) + beta2*(x^2) + beta3*(x^3) + e
# (c) Use the regsubsets() function to perform best subset selection.
data <- data.frame(y = y, x = x)
model_full <- leaps::regsubsets(y ~ poly(x, 10, raw = TRUE), data = data, nvmax = 10)
model_full_summary <- summary(model_full)
### best Cp (p=4)
which.min(model_full_summary$cp)
plot(model_full_summary$cp, xlab = "Model Polynomial Order", ylab = "Cp", pch = 15, type = "l")
points(4, model_full_summary$cp[4], pch = 5, col = "blue", lwd = 7)
### best BIC (p=4)
which.min(model_full_summary$bic)
plot(model_full_summary$bic, xlab = "Model Polynomial Order", ylab = "BIC", pch = 15, type = "l")
points(4, model_full_summary$bic[4], pch = 5, col = "blue", lwd = 7)
### best adjusted R^2 (p=5)
which.max(model_full_summary$adjr2)
plot(model_full_summary$adjr2, xlab = "Model Polynomial Order", ylab = "Adjusted R^2", pch = 15, type = "l")
points(5, model_full_summary$adjr2[5], pch = 5, col = "blue", lwd = 7)
### coefficients of best model obtained
coefficients(model_full, id = 4)
coefficients(model_full, id = 5)
# (d) Perform forward and backward stepwise selection.
model_forward <- leaps::regsubsets(y ~ poly(x, 10, raw = TRUE), data = data, nvmax = 10, method = "forward")
summary_fwd <- summary(model_forward)
model_backward <- leaps::regsubsets(y ~ poly(x, 10, raw = TRUE), data = data, nvmax = 10, method = "backward")
summary_bwd <- summary(model_backward)
### forward selection results
which.min(summary_fwd$cp)       # p=4
which.min(summary_fwd$bic)      # p=4
which.max(summary_fwd$adjr2)    # p=5
### backward selection results
which.min(summary_bwd$cp)       # p=6
which.min(summary_bwd$bic)      # p=4
which.max(summary_bwd$adjr2)    # p=6
coefficients(model_forward, id = 4)
coefficients(model_forward, id = 5)
coefficients(model_backward, id = 4)
coefficients(model_backward, id = 6)
x_lasso <- model.matrix(y ~ poly(x, 10, raw = TRUE), data = data)[,-1]
model_lasso <- glmnet::cv.glmnet(x_lasso, y, alpha = 1)
lambda <- model_lasso$lambda.min
plot(model_lasso)
best_lasso_model <- glmnet::glmnet(x_lasso, y, alpha = 1)
predict(best_lasso_model, s = lambda, type = "coefficients")
beta7 <- 8.5
y <- beta0 + beta7*(x^7) + e
data <- data.frame(y = y, x = x)
model_full <- leaps::regsubsets(y ~ poly(x, 10, raw = TRUE), data = data, nvmax = 10)
model_summary <- summary(model_full)
which.min(model_summary$cp)
coefficients(model_full, id = 1)
which.min(model_summary$bic)
coefficients(model_full, id = 1)
which.max(model_summary$adjr2)
coefficients(model_full, id = 4)
model_lasso <- glmnet::cv.glmnet(x_lasso, y, alpha = 1)
lambda <- model_lasso$lambda.min
plot(model_lasso)
best_lasso_model <- glmnet::glmnet(x_lasso, y, alpha = 1)
predict(best_lasso_model, s = lambda, type = "coefficients")
x <- read.csv("~/Documents/Programming/Blood_Pressure/BP_raw_data.csv")
x$Sex <- as.factor(x$Sex)
x$Section_Time <- as.factor(x$Section_Time)
means <- aggregate(BPsys ~ Sex, x, mean)
summary(aov(BPsys ~ Sex, data = x))
TukeyHSD(aov(BPsys ~ Sex, data = x))
boxplot(BPsys ~ Sex, data = x, xlab = "Sex", ylab = "Systolic BP (mmHg)", xaxt = "n", outline = FALSE)
axis(1,1:2,labels=c("Male","Female"))
points(1:2, means$BPsys, col = "red")
text(1:2, means$BPsys - 2.5, labels = round(means$BPsys, 1), col = "red")
View(means)
means <- aggregate(BPdia ~ Sex, x, mean)
summary(aov(BPdia ~ Sex, data = x))
TukeyHSD(aov(BPdia ~ Sex, data = x))
boxplot(BPdia ~ Sex, data = x, xlab = "Sex", ylab = "Diastolic BP (mmHg)", xaxt = "n", outline = FALSE)
axis(1,1:2,labels=c("Male","Female"))
points(1:2, means$BPdia, col = "red")
text(1:2, means$BPdia - 2.5, labels = round(means$BPdia, 1), col = "red")
View(means)
means <- aggregate(BPsys ~ Section_Time, x, mean)
summary(aov(BPsys ~ Section_Time, data = x))
TukeyHSD(aov(BPsys ~ Section_Time, data = x))
boxplot(BPsys ~ Section_Time, data = x, xlab = "Section Time", ylab = "Systolic BP (mmHg)", xaxt = "n", outline = FALSE)
axis(1,1:3,labels=c("8:40am","1:40pm","6:40pm"))
points(1:3, means$BPsys, col = "red")
text(1:3, means$BPsys - 3.2, labels = round(means$BPsys, 1), col = "red")
View(means)
means <- aggregate(BPdia ~ Section_Time, x, mean)
summary(aov(BPdia ~ Section_Time, data = x))
TukeyHSD(aov(BPdia ~ Section_Time, data = x))
boxplot(BPdia ~ Section_Time, data = x, xlab = "Section Time", ylab = "Diastolic BP (mmHg)", xaxt = "n", outline = FALSE)
axis(1,1:3,labels=c("8:40am","1:40pm","6:40pm"))
points(1:3, means$BPdia, col = "red")
text(1:3, means$BPdia - 1.8, labels = round(means$BPdia, 1), col = "red")
View(means)
sys_model <- lm(BPsys ~ BMI, data = x)
plot(x$BMI, x$BPsys, xlab = "BMI (kg/m^2)", ylab = "Systolic BP (mmHg)")
abline(sys_model)
summary(sys_model)
dia_model <- lm(BPdia ~ BMI, data = x)
plot(x$BMI, x$BPdia, xlab = "BMI (kg/m^2)", ylab = "Diastolic BP (mmHg)")
abline(dia_model)
summary(dia_model)
View(x)
x <- read.csv("~/Documents/Programming/Blood_Pressure/BP_raw_data.csv")
x$Sex <- as.factor(x$Sex)
x$Section_Time <- as.factor(x$Section_Time)
x$Semester <- as.factor(x$Semester)
xxx
means <- aggregate(BPsys ~ Sex, x, mean)
summary(aov(BPsys ~ Sex, data = x))
TukeyHSD(aov(BPsys ~ Sex, data = x))
boxplot(BPsys ~ Sex, data = x, xlab = "Sex", ylab = "Systolic BP (mmHg)", xaxt = "n", outline = FALSE)
axis(1,1:2,labels=c("Male","Female"))
points(1:2, means$BPsys, col = "red")
text(1:2, means$BPsys - 2.5, labels = round(means$BPsys, 1), col = "red")
title("Sex Differences in Systolic BP")
?png
png(filename = "~/Documents/Programming/Blood_Pressure/figures/Sex_Differences_SysBP")
means <- aggregate(BPsys ~ Sex, x, mean)
summary(aov(BPsys ~ Sex, data = x))
TukeyHSD(aov(BPsys ~ Sex, data = x))
boxplot(BPsys ~ Sex, data = x, xlab = "Sex", ylab = "Systolic BP (mmHg)", xaxt = "n", outline = FALSE)
axis(1,1:2,labels=c("Male","Female"))
points(1:2, means$BPsys, col = "red")
text(1:2, means$BPsys - 2.5, labels = round(means$BPsys, 1), col = "red")
title("Sex Differences in Systolic BP")
png(filename = "~/Documents/Programming/Blood_Pressure/figures/Sex_Differences_SysBP")
means <- aggregate(BPsys ~ Sex, x, mean)
summary(aov(BPsys ~ Sex, data = x))
TukeyHSD(aov(BPsys ~ Sex, data = x))
png(filename = "~/Documents/Programming/Blood_Pressure/figures/Sex_Differences_SysBP.png")
boxplot(BPsys ~ Sex, data = x, xlab = "Sex", ylab = "Systolic BP (mmHg)", xaxt = "n", outline = FALSE)
axis(1,1:2,labels=c("Male","Female"))
points(1:2, means$BPsys, col = "red")
text(1:2, means$BPsys - 2.5, labels = round(means$BPsys, 1), col = "red")
title("Sex Differences in Systolic BP")
dev.off()
means <- aggregate(BPdia ~ Sex, x, mean)
summary(aov(BPdia ~ Sex, data = x))
TukeyHSD(aov(BPdia ~ Sex, data = x))
png(filename = "~/Documents/Programming/Blood_Pressure/figures/Sex_Differences_DiaBP.png")
boxplot(BPdia ~ Sex, data = x, xlab = "Sex", ylab = "Diastolic BP (mmHg)", xaxt = "n", outline = FALSE)
axis(1,1:2,labels=c("Male","Female"))
points(1:2, means$BPdia, col = "red")
text(1:2, means$BPdia - 2.5, labels = round(means$BPdia, 1), col = "red")
title("Sex Differences in Diastolic BP")
dev.off()
# one-way ANOVA on effect of Time of Day (1 = 8:40am, 2 = 1:40pm, 3 = 6:40pm) on SYSTOLIC BP
# Results: no differences
means <- aggregate(BPsys ~ Section_Time, x, mean)
summary(aov(BPsys ~ Section_Time, data = x))
TukeyHSD(aov(BPsys ~ Section_Time, data = x))
png(filename = "~/Documents/Programming/Blood_Pressure/figures/Time_SysBP.png")
boxplot(BPsys ~ Section_Time, data = x, xlab = "Section Time", ylab = "Systolic BP (mmHg)", xaxt = "n", outline = FALSE)
axis(1,1:3,labels=c("8:40am","1:40pm","6:40pm"))
points(1:3, means$BPsys, col = "red")
text(1:3, means$BPsys - 3.2, labels = round(means$BPsys, 1), col = "red")
title("Time of Day & Systolic BP")
dev.off()
# one-way ANOVA on effect of Time of Day (1 = 8:40am, 2 = 1:40pm, 3 = 6:40pm) on DIASTOLIC BP
# Results: no differences
means <- aggregate(BPdia ~ Section_Time, x, mean)
summary(aov(BPdia ~ Section_Time, data = x))
TukeyHSD(aov(BPdia ~ Section_Time, data = x))
png(filename = "~/Documents/Programming/Blood_Pressure/figures/Time_DiaBP.png")
boxplot(BPdia ~ Section_Time, data = x, xlab = "Section Time", ylab = "Diastolic BP (mmHg)", xaxt = "n", outline = FALSE)
axis(1,1:3,labels=c("8:40am","1:40pm","6:40pm"))
points(1:3, means$BPdia, col = "red")
text(1:3, means$BPdia - 1.8, labels = round(means$BPdia, 1), col = "red")
title("Time of Day & Systolic BP")
dev.off()
sys_model <- lm(BPsys ~ BMI + Sex + BMI*Sex, data = x)
plot(x$BMI, x$BPsys, xlab = "BMI (kg/m^2)", ylab = "Systolic BP (mmHg)")
abline(sys_model)
summary(sys_model)
dia_model <- lm(BPdia ~ BMI + Sex + BMI*Sex, data = x)
plot(x$BMI, x$BPdia, xlab = "BMI (kg/m^2)", ylab = "Diastolic BP (mmHg)")
abline(dia_model)
summary(dia_model)
# Results: for every 1 unit increase in BMI, systolic BP is 1.1 mmHg greater (p < .001)
sys_model <- lm(BPsys ~ BMI + Sex + BMI*Sex, data = x)
png(filename = "~/Documents/Programming/Blood_Pressure/figures/BMI_SysBP.png")
plot(x$BMI, x$BPsys, xlab = "BMI (kg/m^2)", ylab = "Systolic BP (mmHg)")
abline(sys_model)
summary(sys_model)
title("Relationship between BMI and Systolic BP")
dev.off()
# linear regression of BMI on DIASTOLIC BP
# Results: for every 1 unit increase in BMI, systolic BP is 0.4 mmHg greater (p < .05)
dia_model <- lm(BPdia ~ BMI + Sex + BMI*Sex, data = x)
png(filename = "~/Documents/Programming/Blood_Pressure/figures/BMI_DiaBP.png")
plot(x$BMI, x$BPdia, xlab = "BMI (kg/m^2)", ylab = "Diastolic BP (mmHg)")
abline(dia_model)
summary(dia_model)
title("Relationship between BMI and Systolic BP")
dev.off()
# change directory to where data is, or save data on Desktop (Mac)
x <- read.csv("~/Documents/Programming/Blood_Pressure/BP_raw_data.csv")
x$Sex <- as.factor(x$Sex)
x$Section_Time <- as.factor(x$Section_Time)
x$Semester <- as.factor(x$Semester)
# unpaired samples t-test on effect of Sex on SYSTOLIC BP
# Results: males greater by 3.0 mmHg, but not significantly greater (p = 0.09)
means <- aggregate(BPsys ~ Sex, x, mean)
summary(aov(BPsys ~ Sex, data = x))
TukeyHSD(aov(BPsys ~ Sex, data = x))
png(filename = "~/Documents/Programming/Blood_Pressure/figures/Sex_Differences_SysBP.png")
boxplot(BPsys ~ Sex, data = x, xlab = "Sex", ylab = "Systolic BP (mmHg)", xaxt = "n", outline = FALSE)
axis(1,1:2,labels=c("Male","Female"))
points(1:2, means$BPsys, col = "red")
text(1:2, means$BPsys - 2.5, labels = round(means$BPsys, 1), col = "red")
title("Sex Differences in Systolic BP")
dev.off()
View(means)
# unpaired samples t-test on effect of Sex on DIASTOLIC BP
# Results: males greater by 2.6 mmHg, but not significantly greater (p = 0.12)
means <- aggregate(BPdia ~ Sex, x, mean)
summary(aov(BPdia ~ Sex, data = x))
TukeyHSD(aov(BPdia ~ Sex, data = x))
png(filename = "~/Documents/Programming/Blood_Pressure/figures/Sex_Differences_DiaBP.png")
boxplot(BPdia ~ Sex, data = x, xlab = "Sex", ylab = "Diastolic BP (mmHg)", xaxt = "n", outline = FALSE)
axis(1,1:2,labels=c("Male","Female"))
points(1:2, means$BPdia, col = "red")
text(1:2, means$BPdia - 2.5, labels = round(means$BPdia, 1), col = "red")
title("Sex Differences in Diastolic BP")
dev.off()
# one-way ANOVA on effect of Time of Day (1 = 8:40am, 2 = 1:40pm, 3 = 6:40pm) on SYSTOLIC BP
# Results: no differences
means <- aggregate(BPsys ~ Section_Time, x, mean)
summary(aov(BPsys ~ Section_Time, data = x))
TukeyHSD(aov(BPsys ~ Section_Time, data = x))
png(filename = "~/Documents/Programming/Blood_Pressure/figures/Time_SysBP.png")
boxplot(BPsys ~ Section_Time, data = x, xlab = "Section Time", ylab = "Systolic BP (mmHg)", xaxt = "n", outline = FALSE)
axis(1,1:3,labels=c("8:40am","1:40pm","6:40pm"))
points(1:3, means$BPsys, col = "red")
text(1:3, means$BPsys - 3.2, labels = round(means$BPsys, 1), col = "red")
title("Time of Day & Systolic BP")
dev.off()
# one-way ANOVA on effect of Time of Day (1 = 8:40am, 2 = 1:40pm, 3 = 6:40pm) on DIASTOLIC BP
# Results: no differences
means <- aggregate(BPdia ~ Section_Time, x, mean)
summary(aov(BPdia ~ Section_Time, data = x))
TukeyHSD(aov(BPdia ~ Section_Time, data = x))
png(filename = "~/Documents/Programming/Blood_Pressure/figures/Time_DiaBP.png")
boxplot(BPdia ~ Section_Time, data = x, xlab = "Section Time", ylab = "Diastolic BP (mmHg)", xaxt = "n", outline = FALSE)
axis(1,1:3,labels=c("8:40am","1:40pm","6:40pm"))
points(1:3, means$BPdia, col = "red")
text(1:3, means$BPdia - 1.8, labels = round(means$BPdia, 1), col = "red")
title("Time of Day & Systolic BP")
dev.off()
# linear regression of BMI on SYSTOLIC BP
# Results: for every 1 unit increase in BMI, systolic BP is 1.1 mmHg greater (p < .001)
sys_model <- lm(BPsys ~ BMI + Sex + BMI*Sex, data = x)
png(filename = "~/Documents/Programming/Blood_Pressure/figures/BMI_SysBP.png")
plot(x$BMI, x$BPsys, xlab = "BMI (kg/m^2)", ylab = "Systolic BP (mmHg)")
abline(sys_model)
summary(sys_model)
title("Relationship between BMI and Systolic BP")
dev.off()
sys_model <- lm(BPsys ~ BMI, data = x)
summary(sys_model)
# linear regression of BMI on SYSTOLIC BP
# Results: for every 1 unit increase in BMI, systolic BP is 0.9 mmHg greater (p<.001)
sys_model <- lm(BPsys ~ BMI + Sex + BMI*Sex, data = x)
png(filename = "~/Documents/Programming/Blood_Pressure/figures/BMI_SysBP.png")
plot(x$BMI, x$BPsys, xlab = "BMI (kg/m^2)", ylab = "Systolic BP (mmHg)")
abline(sys_model)
summary(sys_model)
title("Relationship between BMI and Systolic BP")
dev.off()
# linear regression of BMI on DIASTOLIC BP
# Results: for every 1 unit increase in BMI, systolic BP is 0.4 mmHg greater (p < .05)
dia_model <- lm(BPdia ~ BMI + Sex + BMI*Sex, data = x)
png(filename = "~/Documents/Programming/Blood_Pressure/figures/BMI_DiaBP.png")
plot(x$BMI, x$BPdia, xlab = "BMI (kg/m^2)", ylab = "Diastolic BP (mmHg)")
abline(dia_model)
summary(dia_model)
title("Relationship between BMI and Systolic BP")
dev.off()
dia_model <- lm(BPdia ~ BMI, data = x)
summary(dia_model)
dir <- "~/Documents/Programming/Blood_Pressure"
x <- read.csv(dir + "BP_raw_data.csv")
x <- read.csv(paste(dir + "BP_raw_data.csv"))
x <- read.csv(paste(dir, "BP_raw_data.csv"))
x <- read.csv(paste(dir, "BP_raw_data.csv", sep = ""))
# set source directory
dir <- "~/Documents/Programming/Blood_Pressure/"
# change directory to where data is, or save data on Desktop (Mac)
x <- read.csv(paste(dir, "BP_raw_data.csv", sep = ""))
x$Sex <- as.factor(x$Sex)
x$Section_Time <- as.factor(x$Section_Time)
x$Semester <- as.factor(x$Semester)
View(x)
source('~/Documents/Programming/Blood_Pressure/BP_analysis_script.R', echo=TRUE)
